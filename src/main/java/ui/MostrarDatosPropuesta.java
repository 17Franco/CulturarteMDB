package ui;
import java.awt.Image;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Set;
import logica.DTO.DTOPropuesta;
import logica.DTO.DTORegistro_Estado;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import logica.DTO.DTOColaboracion;
import logica.IController;
import logica.Fabrica;
/**
 *
 * @author klaas
 */
public class MostrarDatosPropuesta extends javax.swing.JInternalFrame {

    DTOPropuesta datos = new DTOPropuesta();
    DTOColaboracion colab = new DTOColaboracion();
    private IController controller = Fabrica.getInstance().getController();
    
    public MostrarDatosPropuesta() 
    {
        initComponents();
       
    }
    
    public void inicializarLista() 
    {
        DefaultListModel<String> listaFinal = new DefaultListModel<>();
        DTORegistro_Estado ultimoEstado = datos.getUltimoEstado();
        listaFinal.addElement("Título:                                 " + datos.getTitulo());
        listaFinal.addElement("Descripción:                       " + datos.getDescripcion());
        listaFinal.addElement("Lugar de realización:          " + datos.getLugar());
        listaFinal.addElement("Fecha inicio:                       " + datos.getFecha().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        listaFinal.addElement("Recaudación inicial:            " + datos.getPrecio());
        listaFinal.addElement("Recaudación esperada:      " + datos.getMontoTotal());
        listaFinal.addElement("Fecha de publicación:         " + datos.getFechaPublicacion().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
        listaFinal.addElement("Ganancia Aceptada:           " + datos.getRetorno().toString());
        listaFinal.addElement("Categoría:                           " + datos.getCategoria().getNombreCategoria());
        listaFinal.addElement("Usuario Proponente:           " + datos.nickProponenteToString());
        listaFinal.addElement("Estado actual:                     " + ultimoEstado.getEstado().toString());                         //Estado actual
        listaFinal.addElement("En este estado desde:        " + ultimoEstado.getFechaRegString());               //Muestra la fecha del ultimo estado

        listaDatos.setSelectionModel(new javax.swing.DefaultListSelectionModel()    //Para que no se pueda seleccionar
        {@Override
            public void setSelectionInterval(int index0, int index1) {}
        });
        
        listaDatos.setModel(listaFinal);
        
        listaDatos.setFixedCellHeight(20); //(Distancia vertical entre elementos)
        int total = 0;
        for (DTOColaboracion c : datos.getAporte()) {
            total += c.getMonto();
        }

        Labe.setText("Total Aportes: " + total + "/" + datos.getMontoTotal());
    }

    public void SetDatosPropuesta(DTOPropuesta almacenDatos)
    {
        datos = almacenDatos;                                   //datos seleccionados que vienen de la UI anterior se almacenan
        
        if(almacenDatos.getImagen() != null)                 //Si existe una imagen ingresada...    
        {   //Si alguien modifica el ingreso de la direccion de la imagen esto va a fallar.
            setImagen(almacenDatos.getImagen());        //Se ingresa en la etiqueta
        }
            
        inicializarLista();
    }
    
    public void setImagen(String dirImagen) {
        
        ImageIcon bannerPropuesta = new ImageIcon(dirImagen);
        int ancho = 483;
        int alto = 133;

        Image imgEscalada = bannerPropuesta.getImage().getScaledInstance(
                ancho,
                alto,
                Image.SCALE_SMOOTH
        );
        lel.setIcon(new ImageIcon(imgEscalada));
        lel.setText("");  // Limpia cualquier texto
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollpanel = new javax.swing.JScrollPane();
        listaDatos = new javax.swing.JList<>();
        subTituloEtiqueta = new javax.swing.JLabel();
        botonSalir = new javax.swing.JButton();
        panelDeImagen = new javax.swing.JPanel();
        lel = new javax.swing.JLabel();
        Labe = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Propuedades de Propuesta");

        listaDatos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listaDatos.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        listaDatos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaDatos.setToolTipText("");
        scrollpanel.setViewportView(listaDatos);

        subTituloEtiqueta.setText("Informacón general de la propuesta");

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        panelDeImagen.setBackground(new java.awt.Color(153, 255, 153));

        lel.setFont(new java.awt.Font("Gayathri Thin", 1, 14)); // NOI18N
        lel.setForeground(new java.awt.Color(0, 0, 0));
        lel.setText("404_imagen_de_propuesta_not_found");

        javax.swing.GroupLayout panelDeImagenLayout = new javax.swing.GroupLayout(panelDeImagen);
        panelDeImagen.setLayout(panelDeImagenLayout);
        panelDeImagenLayout.setHorizontalGroup(
            panelDeImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeImagenLayout.createSequentialGroup()
                .addComponent(lel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelDeImagenLayout.setVerticalGroup(
            panelDeImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeImagenLayout.createSequentialGroup()
                .addComponent(lel)
                .addGap(0, 70, Short.MAX_VALUE))
        );

        Labe.setText("Total Aportes:");

        jButton1.setText("Colaboradores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDeImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(subTituloEtiqueta)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollpanel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Labe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonSalir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subTituloEtiqueta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDeImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(scrollpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSalir)
                    .addComponent(Labe)
                    .addComponent(jButton1))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        this.dispose(); //Finaliza caso de uso
    }//GEN-LAST:event_botonSalirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String tituloSeleccionado= datos.getTitulo();
        Set<DTOPropuesta> propuestas = controller.obtenerPropuestas("");//obtengo todos las propuestas
        DTOPropuesta propuestaSeleccionada = null; //aux de propuesta para guardar la que tenga el mismo nombre al seleccionado
        for (DTOPropuesta p : propuestas) {
            if (p.getTitulo().equals(tituloSeleccionado)) { //guardo solo la que tenga el mismo titulo
                propuestaSeleccionada = p;
                break;
                }
            }
        
        List<DTOColaboracion> aportes = propuestaSeleccionada.getAporte();
        if (aportes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Esta propuesta no tiene colaboradores.");
            return;
        }
        String texto = "Colaboradores de " + propuestaSeleccionada.getTitulo() + ":\n\n";
        int i = 1;
        for (DTOColaboracion c : propuestaSeleccionada.getAporte()) {
            texto += i++ + ") " + c.getColaborador()+" | " +" Importe: $"+ c.getMonto() +"\n";
        }
        JOptionPane.showMessageDialog(this, texto);
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Labe;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lel;
    private javax.swing.JList<String> listaDatos;
    private javax.swing.JPanel panelDeImagen;
    private javax.swing.JScrollPane scrollpanel;
    private javax.swing.JLabel subTituloEtiqueta;
    // End of variables declaration//GEN-END:variables
}
